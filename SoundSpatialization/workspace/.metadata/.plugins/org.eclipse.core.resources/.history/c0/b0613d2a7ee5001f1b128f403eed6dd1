package ss.kakapo;

import java.io.*;

import android.app.Activity;
import android.media.*;
import android.os.Bundle;
import android.util.Log;
import android.view.*;
import android.view.View.*;
import android.widget.*;

/** Demonstrates the ability to switch between private space mode and full conference mode with 8 sounds */
public class DemoKakapo throws Exception extends Activity {
	private final String TAG = "DemoKakapo"; // string for the Log tag
	/** Called when the activity is first created. */
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.demomulti);
		// set toggle buttons
		final ToggleButton rOne = (ToggleButton) findViewById(R.id.one);
		final ToggleButton rThree = (ToggleButton) findViewById(R.id.three);
		final ToggleButton rFive = (ToggleButton) findViewById(R.id.five);
		final ToggleButton rSixteen = (ToggleButton) findViewById(R.id.sixteen);
		final ToggleButton rEighteen = (ToggleButton) findViewById(R.id.eighteen);
		final ToggleButton rTwenty = (ToggleButton) findViewById(R.id.twenty);
		Log.i(DemoKakapo.TAG, "ToggleButtons set");
		
		// create SS manipulation for each sound
		AudioSS aOne = new AudioSS(80, 60); // region 1
		AudioSS aThree = new AudioSS(400, 60); // region 3
		AudioSS aFive = new AudioSS(720, 60); // region 5
		AudioSS aSixteen = new AudioSS(80, 420); // region 16
		AudioSS aEighteen = new AudioSS(400, 420); // region 18
		AudioSS aTwenty = new AudioSS(720, 420); // region 20
		
		Log.i(DemoKakapo.TAG, "AudioSS set");
		
		// gain access to each sound source
		InputStream sOne = getResources().openRawResource(R.raw.lowc);
		byte[] dOne = new byte[sOne.available()];
		sOne.read(dOne, 0, dOne.length);
		sOne.close();
		InputStream sThree = getResources().openRawResource(R.raw.lowe);
		byte[] dThree = new byte[sThree.available()]; 
		sThree.read(dThree, 0, dThree.length);
		sThree.close();
		InputStream sFive = getResources().openRawResource(R.raw.lowg);
		byte[] dFive = new byte[sFive.available()];
		sFive.read(dFive, 0, dFive.length);
		sFive.close();
		InputStream sSixteen = getResources().openRawResource(R.raw.highc);
		byte[] dSixteen = new byte[sSixteen.available()];
		sSixteen.read(dSixteen, 0, dSixteen.length);
		sSixteen.close();
		InputStream sEighteen = getResources().openRawResource(R.raw.highe);
		byte[] dEighteen = new byte[sEighteen.available()];
		sEighteen.read(dEighteen, 0, dEighteen.length);
		sEighteen.close();
		InputStream sTwenty = getResources().openRawResource(R.raw.highg);
		byte[] dTwenty = new byte[sTwenty.available()];
		sTwenty.read(dTwenty, 0, dTwenty.length);
		sTwenty.close();
		
		// play and write each sound source
		aOne.play();
		aThree.play();
		aFive.play();
		aSixteen.play();
		aEighteen.play();
		aTwenty.play();


		// set click listener
		rOne.setOnClickListener(new OnClickListener() {
			// if the region is marked as part of the private space
			public void onClick(View v) {
				// in private space
				if (rOne.isChecked()) {
					
				}
				else {
				}
			} // end onClick method
		});
    } // end onCreate method
} // end class DemoKakapo