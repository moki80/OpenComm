package ss.kakapo;

import android.app.Activity;
import android.os.Bundle;
import java.io.*;

import android.app.Activity;
import android.os.Bundle;
import android.util.Log;
import android.view.*;
import android.view.View.*;
import android.widget.*;

	/** Demonstrates the ability to switch between private space mode and full conference mode with 8 sounds */
public class DemoKakapo extends Activity {
	public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.demomulti);
		// set toggle buttons
		final ToggleButton rOne = (ToggleButton) findViewById(R.id.one);
		final ToggleButton rThree = (ToggleButton) findViewById(R.id.three);
		final ToggleButton rFive = (ToggleButton) findViewById(R.id.five);
		final ToggleButton rSixteen = (ToggleButton) findViewById(R.id.sixteen);
		final ToggleButton rEighteen = (ToggleButton) findViewById(R.id.eighteen);
		final ToggleButton rTwenty = (ToggleButton) findViewById(R.id.twenty);
		Log.i("DemoKakapo", "ToggleButtons set");
		
		// create SS manipulation for each sound
		final AudioSS aOne = new AudioSS(80, 60); // region 1
		final AudioSS aThree = new AudioSS(400, 60); // region 3
		final AudioSS aFive = new AudioSS(720, 60); // region 5
		final AudioSS aSixteen = new AudioSS(80, 420); // region 16
		final AudioSS aEighteen = new AudioSS(400, 420); // region 18
		final AudioSS aTwenty = new AudioSS(720, 420); // region 20
		
		Log.i("DemoKakapo", "AudioSS set");
		byte mOne[] = new byte[1920000];
		// gain access to each sound source
		try {
			InputStream is = getResources().openRawResource(R.raw.lowc);
			BufferedInputStream bis = new BufferedInputStream(is);
			DataInputStream dis = new DataInputStream(bis);

			// Read the file into the music array.
			int i = 0;
			while (dis.available() > 0) {
				mOne[i] = dis.readByte();
				i++;
			}
			// Close the input streams.
			dis.close();    
		} catch (Exception e)
		{
			Log.e("DemoKakapo", "lowc.raw not read");
		}
		byte mThree[] = new byte[1920000];
		// gain access to each sound source
		try {
			InputStream is = getResources().openRawResource(R.raw.lowe);
			BufferedInputStream bis = new BufferedInputStream(is);
			DataInputStream dis = new DataInputStream(bis);

			// Read the file into the music array.
			int i = 0;
			while (dis.available() > 0) {
				mThree[i] = dis.readByte();
				i++;
			}
			// Close the input streams.
			dis.close();    
		} catch (Exception e)
		{
			Log.e("DemoKakapo", "lowe.raw not read");
		}
		byte mFive[] = new byte[1920000];
		// gain access to each sound source
		try {
			InputStream is = getResources().openRawResource(R.raw.lowg);
			BufferedInputStream bis = new BufferedInputStream(is);
			DataInputStream dis = new DataInputStream(bis);

			// Read the file into the music array.
			int i = 0;
			while (dis.available() > 0) {
				mFive[i] = dis.readByte();
				i++;
			}
			// Close the input streams.
			dis.close();    
		} catch (Exception e)
		{
			Log.e("DemoKakapo", "lowg.raw not read");
		}
		byte mSixteen[] = new byte[1920000];
		// gain access to each sound source
		try {
			InputStream is = getResources().openRawResource(R.raw.highc);
			BufferedInputStream bis = new BufferedInputStream(is);
			DataInputStream dis = new DataInputStream(bis);

			// Read the file into the music array.
			int i = 0;
			while (dis.available() > 0) {
				mSixteen[i] = dis.readByte();
				i++;
			}
			// Close the input streams.
			dis.close();    
		} catch (Exception e)
		{
			Log.e("DemoKakapo", "highc.raw not read");
		}
		byte mEighteen[] = new byte[1920000];
		// gain access to each sound source
		try {
			InputStream is = getResources().openRawResource(R.raw.highe);
			BufferedInputStream bis = new BufferedInputStream(is);
			DataInputStream dis = new DataInputStream(bis);

			// Read the file into the music array.
			int i = 0;
			while (dis.available() > 0) {
				mEighteen[i] = dis.readByte();
				i++;
			}
			// Close the input streams.
			dis.close();    
		} catch (Exception e)
		{
			Log.e("DemoKakapo", "highe.raw not read");
		}
		byte mTwenty[] = new byte[1920000];
		// gain access to each sound source
		try {
			InputStream is = getResources().openRawResource(R.raw.highg);
			BufferedInputStream bis = new BufferedInputStream(is);
			DataInputStream dis = new DataInputStream(bis);

			// Read the file into the music array.
			int i = 0;
			while (dis.available() > 0) {
				mTwenty[i] = dis.readByte();
				i++;
			}
			// Close the input streams.
			dis.close();    
		} catch (Exception e)
		{
			Log.e("DemoKakapo", "highg.raw not read");
		}

		// play and write each sound source
		aOne.play();
		aThree.play();
		aFive.play();
		aSixteen.play();
		aEighteen.play();
		aTwenty.play();

		// set click listener
		rOne.setOnClickListener(new OnClickListener() {
			// if the region is marked as part of the private space
			public void onClick(View v) {
				// in private space
				if (rOne.isChecked()) {
					aOne.setStereoVolume(aOne.getVolume()[0], aOne.getVolume()[1]);
				}
				else {
					aOne.setStereoVolume(aOne.getVolume()[0]/2, aOne.getVolume()[1]/2);
				}
			} // end onClick method
		});
		
		rThree.setOnClickListener(new OnClickListener() {
			// if the region is marked as part of the private space
			public void onClick(View v) {
				// in private space
				if (rThree.isChecked()) {
					aThree.setStereoVolume(aThree.getVolume()[0], aThree.getVolume()[1]);
				}
				else {
					aThree.setStereoVolume(aThree.getVolume()[0]/2, aThree.getVolume()[1]/2);
				}
			} // end onClick method
		});
		
		rFive.setOnClickListener(new OnClickListener() {
			// if the region is marked as part of the private space
			public void onClick(View v) {
				// in private space
				if (rFive.isChecked()) {
					aFive.setStereoVolume(aFive.getVolume()[0], aFive.getVolume()[1]);
				}
				else {
					aFive.setStereoVolume(aFive.getVolume()[0]/2, aFive.getVolume()[1]/2);
				}
			} // end onClick method
		});
		
		rSixteen.setOnClickListener(new OnClickListener() {
			// if the region is marked as part of the private space
			public void onClick(View v) {
				// in private space
				if (rSixteen.isChecked()) {
					aSixteen.setStereoVolume(aSixteen.getVolume()[0], aSixteen.getVolume()[1]);
				}
				else {
					aSixteen.setStereoVolume(aSixteen.getVolume()[0]/2, aSixteen.getVolume()[1]/2);
				}
			} // end onClick method
		});

		rEighteen.setOnClickListener(new OnClickListener() {
			// if the region is marked as part of the private space
			public void onClick(View v) {
				// in private space
				if (rEighteen.isChecked()) {
					aEighteen.setStereoVolume(aEighteen.getVolume()[0], aEighteen.getVolume()[1]);
				}
				else {
					aEighteen.setStereoVolume(aEighteen.getVolume()[0]/2, aEighteen.getVolume()[1]/2);
				}
			} // end onClick method
		});

		rTwenty.setOnClickListener(new OnClickListener() {
			// if the region is marked as part of the private space
			public void onClick(View v) {
				// in private space
				if (rTwenty.isChecked()) {
					aTwenty.setStereoVolume(aTwenty.getVolume()[0], aTwenty.getVolume()[1]);
				}
				else {
					aTwenty.setStereoVolume(aTwenty.getVolume()[0]/2, aTwenty.getVolume()[1]/2);
				}
			} // end onClick method
		});
    } // end onCreate method
} // end class DemoKakapo